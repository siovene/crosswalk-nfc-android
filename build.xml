<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant"
         name="nfc" default="dist">
  <!-- Java source -->
  <property name="src" value="java" />

  <!-- downloaded third party libraries -->
  <property name="lib" value="lib" />

  <!-- Crosswalk Android version -->
  <property name="crosswalk-version-category"
            value="stable" />
  <property name="crosswalk-version"
            value="5.34.104.5" />

  <!-- location of downloaded Crosswalk Android file -->
  <property name="crosswalk-zip" value="${lib}/crosswalk.zip" />

  <!-- temporary build directory -->
  <property name="build" value="build" />

  <!-- final location for the built extension -->
  <property name="dist" value="nfc" />

  <!-- classpath containing the Ivy Ant tasks jar file -->
  <path id="ivy.lib.path">
    <fileset dir="tools" includes="*.jar"/>
  </path>

  <!-- delete + make the temporary build directories -->
  <target name="prepare">
    <delete dir="${build}" quiet="true" />
    <delete dir="${dist}" quiet="true" />

    <mkdir dir="${build}" />
    <mkdir dir="${lib}" />
    <mkdir dir="${dist}" />
  </target>

  <!-- download dependencies using Ivy -->
  <target name="download-deps" depends="prepare">
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
             uri="antlib:org.apache.ivy.ant"
             classpathref="ivy.lib.path" />
    <ivy:retrieve pattern="${lib}/[artifact]-[revision].[ext]" />
  </target>

  <!-- check whether the Crosswalk zip file is present -->
  <target name="check-crosswalk-present" depends="prepare">
    <available file="${crosswalk-zip}"
               property="crosswalk-zip.present"/>
  </target>

  <!-- manually get crosswalk.zip if it's not already there -->
  <target name="download-crosswalk"
          depends="prepare, check-crosswalk-present"
          unless="crosswalk-zip.present">
    <!-- fetch from the download site -->
    <get src="https://download.01.org/crosswalk/releases/crosswalk/android/${crosswalk-version-category}/${crosswalk-version}/crosswalk-${crosswalk-version}.zip" dest="${crosswalk-zip}" />

    <!-- unpack to lib/crosswalk-*/ -->
    <unzip src="${crosswalk-zip}" dest="${lib}" />
  </target>

  <!-- compile the extension Java code -->
  <target name="compile" depends="download-deps, download-crosswalk">
    <javac includeantruntime="false" srcdir="${src}" destdir="${build}"
           encoding="utf-8" debug="true" verbose="true">
      <classpath>
        <fileset dir="${lib}" includes="*.jar" />
        <file file="${lib}/crosswalk-${crosswalk-version}/libs/xwalk_app_runtime_java.jar" />
      </classpath>
    </javac>
  </target>

  <!--
  pack third party Java code and extension code into a single
  jar, and copy supporting files to the xwalk-audiofs-extension/
  directory; NB we don't need to pack any Crosswalk jars, as they
  will be added by the packaging tool; and we don't need android.jar,
  as that is on the Android target already
  -->
  <target name="dist" depends="compile">
    <unjar dest="${build}">
      <fileset dir="${lib}">
        <include name="*.jar" />
        <exclude name="android*.jar" />
      </fileset>
    </unjar>

    <jar destfile="${dist}/nfc.jar">
      <fileset dir="${build}" excludes="META-INF/**" />
    </jar>

    <copy file="nfc.json" todir="${dist}" />
    <copy file="js/nfc.js" todir="${dist}" />

    <!--
    Also copy to Crosswalk's nfc_example directory for packing.
    -->
    <copy todir="lib/crosswalk-${crosswalk-version}/nfc_example/xwalk-extensions/nfc">
        <fileset dir="nfc" />
    </copy>
  </target>
</project>
